{"ast":null,"code":"import axiosInstance from \"./axiosConfig\";\nexport const calculate = (amount, numberOfMonths) => {\n  const interest = amount * (5 / 100) * numberOfMonths;\n  const totalAmountToBePaid = amount + interest;\n  const monthlyReturn = totalAmountToBePaid / numberOfMonths;\n  //const monthlyInterestRate = interestRate / 100 / numberOfMonths;  //Math.round\n  return {\n    interest: parseInt(interest),\n    totalAmountToBePaid: parseInt(totalAmountToBePaid),\n    monthlyReturn: parmonthlyReturn\n  };\n};\nexport const getAllConsultation = async () => {\n  const response = await axiosInstance.get(\"/getalluserconsultation\");\n  return response.data;\n};\nexport const getSingleConsulation = async data => {\n  console.log(data, \"ser\");\n  const response = await axiosInstance.post(\"/getsingleconsulation\", data);\n  return response.data;\n};\nexport const createConsultation = async data => {\n  const response = await axiosInstance.post(\"/createconsultation\", data);\n  return response;\n};\nexport const registerUser = async data => {\n  const response = await axiosInstance.post(\"/user/register\", data);\n  return response;\n};\nexport const loginofficer = async data => {\n  const response = await axiosInstance.post(\"/user/login\", data); ///user/login\n  if (response.status === 200) {\n    localStorage.setItem(\"user\", JSON.stringify(response.data.data));\n    localStorage.setItem(\"token\", response.data.data.token);\n    return response;\n  }\n  return null;\n};\nexport const getAllUsers = async data => {\n  const response = await axiosInstance.get(\"/getalluser\", data);\n  return response.data;\n};\n\n//\n\nexport const getSingleUser = async id => {\n  const response = await axiosInstance.get(\"/getsingleuser/\" + id);\n  return response.data.data;\n};","map":{"version":3,"names":["axiosInstance","calculate","amount","numberOfMonths","interest","totalAmountToBePaid","monthlyReturn","parseInt","parmonthlyReturn","getAllConsultation","response","get","data","getSingleConsulation","console","log","post","createConsultation","registerUser","loginofficer","status","localStorage","setItem","JSON","stringify","token","getAllUsers","getSingleUser","id"],"sources":["C:/Users/HP/coperative-frontend/src/features/services/userServices.js"],"sourcesContent":["\r\nimport axiosInstance from \"./axiosConfig\"\r\n\r\n\r\n\r\n\r\n\r\nexport const  calculate = (amount, numberOfMonths)=>{\r\n\r\n  const interest = (amount * (5 / 100) * numberOfMonths);\r\n  const totalAmountToBePaid = amount + interest\r\n  const monthlyReturn = totalAmountToBePaid/numberOfMonths\r\n  //const monthlyInterestRate = interestRate / 100 / numberOfMonths;  //Math.round\r\n  return {interest : parseInt(interest),\r\n        totalAmountToBePaid : parseInt(totalAmountToBePaid), \r\n        monthlyReturn:parmonthlyReturn };\r\n} \r\n\r\nexport const getAllConsultation  = async ()=> {\r\n  const response = await axiosInstance.get(\"/getalluserconsultation\");\r\n\r\n  return response.data\r\n    \r\n}\r\n\r\nexport const getSingleConsulation  = async (data)=> {\r\n  console.log(data,\"ser\")\r\n  const response = await axiosInstance.post(\"/getsingleconsulation\",data);\r\n\r\n  return response.data\r\n    \r\n}\r\n\r\n\r\nexport const createConsultation  = async (data)=> {\r\n  const response = await axiosInstance.post(\"/createconsultation\",data);\r\n\r\n  return response\r\n    \r\n}\r\n\r\nexport const registerUser  = async (data)=> {\r\n  const response = await axiosInstance.post(\"/user/register\",data);\r\n\r\n  return response\r\n    \r\n}\r\n\r\nexport const loginofficer  = async (data)=> {\r\n  const response = await axiosInstance.post(\"/user/login\",data);///user/login\r\n  if(response.status ===200){\r\n    localStorage.setItem(\"user\", JSON.stringify(response.data.data))\r\n    localStorage.setItem(\"token\", (response.data.data.token))\r\n    return response\r\n    \r\n   } \r\n   return null\r\n    \r\n}\r\n\r\n\r\nexport const getAllUsers  = async (data)=> {\r\n  const response = await axiosInstance.get(\"/getalluser\",data);\r\n\r\n  return response.data\r\n    \r\n}\r\n\r\n//\r\n\r\nexport const getSingleUser  = async (id)=> {\r\n  const response = await axiosInstance.get(\"/getsingleuser/\"+id);\r\n\r\n  return response.data.data\r\n    \r\n}\r\n\r\n\r\n\r\n   "],"mappings":"AACA,OAAOA,aAAa,MAAM,eAAe;AAMzC,OAAO,MAAOC,SAAS,GAAGA,CAACC,MAAM,EAAEC,cAAc,KAAG;EAElD,MAAMC,QAAQ,GAAIF,MAAM,IAAI,CAAC,GAAG,GAAG,CAAC,GAAGC,cAAe;EACtD,MAAME,mBAAmB,GAAGH,MAAM,GAAGE,QAAQ;EAC7C,MAAME,aAAa,GAAGD,mBAAmB,GAACF,cAAc;EACxD;EACA,OAAO;IAACC,QAAQ,EAAGG,QAAQ,CAACH,QAAQ,CAAC;IAC/BC,mBAAmB,EAAGE,QAAQ,CAACF,mBAAmB,CAAC;IACnDC,aAAa,EAACE;EAAiB,CAAC;AACxC,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAI,MAAAA,CAAA,KAAW;EAC5C,MAAMC,QAAQ,GAAG,MAAMV,aAAa,CAACW,GAAG,CAAC,yBAAyB,CAAC;EAEnE,OAAOD,QAAQ,CAACE,IAAI;AAEtB,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAI,MAAOD,IAAI,IAAI;EAClDE,OAAO,CAACC,GAAG,CAACH,IAAI,EAAC,KAAK,CAAC;EACvB,MAAMF,QAAQ,GAAG,MAAMV,aAAa,CAACgB,IAAI,CAAC,uBAAuB,EAACJ,IAAI,CAAC;EAEvE,OAAOF,QAAQ,CAACE,IAAI;AAEtB,CAAC;AAGD,OAAO,MAAMK,kBAAkB,GAAI,MAAOL,IAAI,IAAI;EAChD,MAAMF,QAAQ,GAAG,MAAMV,aAAa,CAACgB,IAAI,CAAC,qBAAqB,EAACJ,IAAI,CAAC;EAErE,OAAOF,QAAQ;AAEjB,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAI,MAAON,IAAI,IAAI;EAC1C,MAAMF,QAAQ,GAAG,MAAMV,aAAa,CAACgB,IAAI,CAAC,gBAAgB,EAACJ,IAAI,CAAC;EAEhE,OAAOF,QAAQ;AAEjB,CAAC;AAED,OAAO,MAAMS,YAAY,GAAI,MAAOP,IAAI,IAAI;EAC1C,MAAMF,QAAQ,GAAG,MAAMV,aAAa,CAACgB,IAAI,CAAC,aAAa,EAACJ,IAAI,CAAC,CAAC;EAC9D,IAAGF,QAAQ,CAACU,MAAM,KAAI,GAAG,EAAC;IACxBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACd,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;IAChES,YAAY,CAACC,OAAO,CAAC,OAAO,EAAGZ,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACa,KAAM,CAAC;IACzD,OAAOf,QAAQ;EAEhB;EACA,OAAO,IAAI;AAEd,CAAC;AAGD,OAAO,MAAMgB,WAAW,GAAI,MAAOd,IAAI,IAAI;EACzC,MAAMF,QAAQ,GAAG,MAAMV,aAAa,CAACW,GAAG,CAAC,aAAa,EAACC,IAAI,CAAC;EAE5D,OAAOF,QAAQ,CAACE,IAAI;AAEtB,CAAC;;AAED;;AAEA,OAAO,MAAMe,aAAa,GAAI,MAAOC,EAAE,IAAI;EACzC,MAAMlB,QAAQ,GAAG,MAAMV,aAAa,CAACW,GAAG,CAAC,iBAAiB,GAACiB,EAAE,CAAC;EAE9D,OAAOlB,QAAQ,CAACE,IAAI,CAACA,IAAI;AAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}